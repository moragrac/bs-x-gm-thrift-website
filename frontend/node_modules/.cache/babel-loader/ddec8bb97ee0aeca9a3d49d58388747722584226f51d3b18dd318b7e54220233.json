{"ast":null,"code":"var _jsxFileName = \"/Users/gracemora/Desktop/bs.gm.website-main/frontend/src/Store.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext();\nexport function StoreProvider(props) {\n  _s();\n  const initialState = {\n    cart: {\n      cartItems: []\n    }\n  };\n  function reducer(state, action) {\n    //allows user to switch between two states (ie on and off)\n    switch (action.type) {\n      //add items to cart\n      case \"CART_ADD_ITEM\":\n        //keep all previous values\n        return {\n          ...state,\n          cart: {\n            ...cart,\n            cartItems: [...state.cart.cartItems, action.payload]\n          }\n        };\n      default:\n        return state;\n    }\n  }\n  // state is the start and dispact is the action to change the state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispact\n  };\n\n  // .Provider is apart of the Context functionality in React, passes items to consumers\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.childern\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n}\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = StoreProvider;\nvar _c;\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["createContext","useReducer","jsxDEV","_jsxDEV","Store","StoreProvider","props","_s","initialState","cart","cartItems","reducer","state","action","type","payload","dispatch","value","dispact","Provider","children","childern","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gracemora/Desktop/bs.gm.website-main/frontend/src/Store.js"],"sourcesContent":["import { createContext, useReducer } from \"react\";\n\nexport const Store = createContext();\n\nexport function StoreProvider(props) {\n  const initialState = {\n    cart: {\n      cartItems: [],\n    },\n  };\n\n  function reducer(state, action) {\n    //allows user to switch between two states (ie on and off)\n    switch (action.type) {\n      //add items to cart\n      case \"CART_ADD_ITEM\":\n        //keep all previous values\n        return {\n          ...state,\n          cart: {\n            ...cart,\n            cartItems: [...state.cart.cartItems, action.payload],\n          },\n        };\n      default:\n        return state;\n    }\n  }\n  // state is the start and dispact is the action to change the state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispact };\n\n  // .Provider is apart of the Context functionality in React, passes items to consumers\n  return <Store.Provider value={value}>{props.childern}</Store.Provider>;\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,MAAMC,KAAK,gBAAGJ,aAAa,CAAC,CAAC;AAEpC,OAAO,SAASK,aAAaA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACnC,MAAMC,YAAY,GAAG;IACnBC,IAAI,EAAE;MACJC,SAAS,EAAE;IACb;EACF,CAAC;EAED,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC9B;IACA,QAAQA,MAAM,CAACC,IAAI;MACjB;MACA,KAAK,eAAe;QAClB;QACA,OAAO;UACL,GAAGF,KAAK;UACRH,IAAI,EAAE;YACJ,GAAGA,IAAI;YACPC,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACH,IAAI,CAACC,SAAS,EAAEG,MAAM,CAACE,OAAO;UACrD;QACF,CAAC;MACH;QACE,OAAOH,KAAK;IAChB;EACF;EACA;EACA,MAAM,CAACA,KAAK,EAAEI,QAAQ,CAAC,GAAGf,UAAU,CAACU,OAAO,EAAEH,YAAY,CAAC;EAC3D,MAAMS,KAAK,GAAG;IAAEL,KAAK;IAAEM;EAAQ,CAAC;;EAEhC;EACA,oBAAOf,OAAA,CAACC,KAAK,CAACe,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAG,QAAA,EAAEd,KAAK,CAACe;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AACxE;AAAClB,EAAA,CA9BeF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}