{"ast":null,"code":"var _jsxFileName = \"/Users/gracemora/Desktop/bs.gm.website-main/frontend/src/Store.js\",\n  _s = $RefreshSig$();\n// import { createContext, useReducer } from \"react\";\n\n// export const Store = createContext();\n\n// export function StoreProvider(props) {\n//   const initialState = {\n//     cart: {\n//       cartItems: [],\n//     },\n//   };\n\n//   function reducer(state, action) {\n//     //allows user to switch between two states (ie on and off)\n//     switch (action.type) {\n//       //add items to cart\n//       case \"CART_ADD_ITEM\":\n//         //keep all previous values and continue to add items\n//         return {\n//           ...state,\n//           cart: {\n//             ...cart,\n//             cartItems: [...state.cart.cartItems, action.payload],\n//           },\n//         };\n//       default:\n//         return state;\n//     }\n//   }\n//   // state is the start and dispact is the action to change the state\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   const value = { state, dispa };\n\n//   // .Provider is apart of the Context functionality in React, passes items to consumers\n//   return <Store.Provider value={value}>{props.childern}</Store.Provider>;\n// }\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext();\nconst initialState = {\n  cart: {\n    cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : []\n  }\n};\nfunction reducer(state, action) {\n  //allows user to switch between two states (ie on and off)\n  switch (action.type) {\n    case \"CART_ADD_ITEM\":\n      // add to cart\n      const newItem = action.payload;\n      const existItem = state.cart.cartItems.find(item => item._id === newItem._id);\n      const cartItems = existItem ? state.cart.cartItems.map(item => item._id === existItem._id ? newItem : item) : [...state.cart.cartItems, newItem];\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          cartItems\n        }\n      };\n    case \"CART_REMOVE_ITEM\":\n      {\n        //filter the cart items array\n        // if the item ID does not equal the current id, return it, otherwise remove it\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n        return {\n          ...state,\n          cart: {\n            ...state.cart,\n            cartItems\n          }\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport function StoreProvider(props) {\n  _s();\n  // state is the start and dispact is the action to change the state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: [props.children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this);\n}\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = StoreProvider;\nvar _c;\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["createContext","useReducer","jsxDEV","_jsxDEV","Store","initialState","cart","cartItems","localStorage","getItem","JSON","parse","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","setItem","stringify","filter","StoreProvider","props","_s","dispatch","value","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gracemora/Desktop/bs.gm.website-main/frontend/src/Store.js"],"sourcesContent":["// import { createContext, useReducer } from \"react\";\n\n// export const Store = createContext();\n\n// export function StoreProvider(props) {\n//   const initialState = {\n//     cart: {\n//       cartItems: [],\n//     },\n//   };\n\n//   function reducer(state, action) {\n//     //allows user to switch between two states (ie on and off)\n//     switch (action.type) {\n//       //add items to cart\n//       case \"CART_ADD_ITEM\":\n//         //keep all previous values and continue to add items\n//         return {\n//           ...state,\n//           cart: {\n//             ...cart,\n//             cartItems: [...state.cart.cartItems, action.payload],\n//           },\n//         };\n//       default:\n//         return state;\n//     }\n//   }\n//   // state is the start and dispact is the action to change the state\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   const value = { state, dispa };\n\n//   // .Provider is apart of the Context functionality in React, passes items to consumers\n//   return <Store.Provider value={value}>{props.childern}</Store.Provider>;\n// }\nimport { createContext, useReducer } from \"react\";\n\nexport const Store = createContext();\n\nconst initialState = {\n  cart: {\n    cartItems: localStorage.getItem(\"cartItems\")\n      ? JSON.parse(localStorage.getItem(\"cartItems\"))\n      : [],\n  },\n};\nfunction reducer(state, action) {\n  //allows user to switch between two states (ie on and off)\n  switch (action.type) {\n    case \"CART_ADD_ITEM\":\n      // add to cart\n      const newItem = action.payload;\n      const existItem = state.cart.cartItems.find(\n        (item) => item._id === newItem._id\n      );\n      const cartItems = existItem\n        ? state.cart.cartItems.map((item) =>\n            item._id === existItem._id ? newItem : item\n          )\n        : [...state.cart.cartItems, newItem];\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return { ...state, cart: { ...state.cart, cartItems } };\n\n    case \"CART_REMOVE_ITEM\": {\n      //filter the cart items array\n      // if the item ID does not equal the current id, return it, otherwise remove it\n      const cartItems = state.cart.cartItems.filter(\n        (item) => item._id !== action.payload._id\n      );\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return { ...state, cart: { ...state.cart, cartItems } };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  // state is the start and dispact is the action to change the state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children} </Store.Provider>;\n}\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,MAAMC,KAAK,gBAAGJ,aAAa,CAAC,CAAC;AAEpC,MAAMK,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,SAAS,EAAEC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GACxCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAC7C;EACN;AACF,CAAC;AACD,SAASG,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAClB;MACA,MAAMC,OAAO,GAAGF,MAAM,CAACG,OAAO;MAC9B,MAAMC,SAAS,GAAGL,KAAK,CAACP,IAAI,CAACC,SAAS,CAACY,IAAI,CACxCC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKL,OAAO,CAACK,GACjC,CAAC;MACD,MAAMd,SAAS,GAAGW,SAAS,GACvBL,KAAK,CAACP,IAAI,CAACC,SAAS,CAACe,GAAG,CAAEF,IAAI,IAC5BA,IAAI,CAACC,GAAG,KAAKH,SAAS,CAACG,GAAG,GAAGL,OAAO,GAAGI,IACzC,CAAC,GACD,CAAC,GAAGP,KAAK,CAACP,IAAI,CAACC,SAAS,EAAES,OAAO,CAAC;MACtCR,YAAY,CAACe,OAAO,CAAC,WAAW,EAAEb,IAAI,CAACc,SAAS,CAACjB,SAAS,CAAC,CAAC;MAC5D,OAAO;QAAE,GAAGM,KAAK;QAAEP,IAAI,EAAE;UAAE,GAAGO,KAAK,CAACP,IAAI;UAAEC;QAAU;MAAE,CAAC;IAEzD,KAAK,kBAAkB;MAAE;QACvB;QACA;QACA,MAAMA,SAAS,GAAGM,KAAK,CAACP,IAAI,CAACC,SAAS,CAACkB,MAAM,CAC1CL,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKP,MAAM,CAACG,OAAO,CAACI,GACxC,CAAC;QACDb,YAAY,CAACe,OAAO,CAAC,WAAW,EAAEb,IAAI,CAACc,SAAS,CAACjB,SAAS,CAAC,CAAC;QAC5D,OAAO;UAAE,GAAGM,KAAK;UAAEP,IAAI,EAAE;YAAE,GAAGO,KAAK,CAACP,IAAI;YAAEC;UAAU;QAAE,CAAC;MACzD;IAEA;MACE,OAAOM,KAAK;EAChB;AACF;AAEA,OAAO,SAASa,aAAaA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACnC;EACA,MAAM,CAACf,KAAK,EAAEgB,QAAQ,CAAC,GAAG5B,UAAU,CAACW,OAAO,EAAEP,YAAY,CAAC;EAC3D,MAAMyB,KAAK,GAAG;IAAEjB,KAAK;IAAEgB;EAAS,CAAC;EACjC,oBAAO1B,OAAA,CAACC,KAAK,CAAC2B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAE,QAAA,GAAEL,KAAK,CAACK,QAAQ,EAAC,GAAC;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAgB,CAAC;AACzE;AAACR,EAAA,CALeF,aAAa;AAAAW,EAAA,GAAbX,aAAa;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}