{"ast":null,"code":"var _jsxFileName = \"/Users/gracemora/Desktop/bs.gm.website-main/frontend/src/Store.js\",\n  _s = $RefreshSig$();\n// import { createContext, useReducer } from \"react\";\n\n// export const Store = createContext();\n\n// export function StoreProvider(props) {\n//   const initialState = {\n//     cart: {\n//       cartItems: [],\n//     },\n//   };\n\n//   function reducer(state, action) {\n//     //allows user to switch between two states (ie on and off)\n//     switch (action.type) {\n//       //add items to cart\n//       case \"CART_ADD_ITEM\":\n//         //keep all previous values and continue to add items\n//         return {\n//           ...state,\n//           cart: {\n//             ...cart,\n//             cartItems: [...state.cart.cartItems, action.payload],\n//           },\n//         };\n//       default:\n//         return state;\n//     }\n//   }\n//   // state is the start and dispact is the action to change the state\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   const value = { state, dispa };\n\n//   // .Provider is apart of the Context functionality in React, passes items to consumers\n//   return <Store.Provider value={value}>{props.childern}</Store.Provider>;\n// }\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext();\nconst initialState = {\n  userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null,\n  cart: {\n    shippingAddress: localStorage.getItem(\"shippingAddress\") ? JSON.parse(localStorage.getItem(\"shippingAddress\")) :\n    //if doesn't exist, make it an empty Object\n    {},\n    cartItems: localStorage.getItem(\"cartItems\") ?\n    // parse makes a javascript object\n    JSON.parse(localStorage.getItem(\"cartItems\")) : []\n  }\n};\nfunction reducer(state, action) {\n  //allows user to switch between two states (ie on and off)\n  switch (action.type) {\n    case \"CART_ADD_ITEM\":\n      // add to cart\n      const newItem = action.payload;\n      const existItem = state.cart.cartItems.find(item => item._id === newItem._id);\n      const cartItems = existItem ? state.cart.cartItems.map(item => item._id === existItem._id ? newItem : item) : [...state.cart.cartItems, newItem];\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return {\n        ...state,\n        cart: {\n          ...state.cart,\n          cartItems\n        }\n      };\n    case \"CART_REMOVE_ITEM\":\n      {\n        //filter the cart items array\n        // if the item ID does not equal the current id, return it, otherwise remove it\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n        return {\n          ...state,\n          cart: {\n            ...state.cart,\n            cartItems\n          }\n        };\n      }\n    case \"USER_SIGNIN\":\n      {\n        return {\n          ...state,\n          userInfo: action.payload\n        };\n      }\n    case \"USER_SIGNOUT\":\n      return {\n        ...state,\n        userInfo: null\n      };\n    case \"SAVE_SHIPPING_ADDRESS\":\n      return {\n        ...state,\n        cart: {\n          //leave state of cart and state alone thats what the ... mean\n          ...state.cart,\n          shippingAddress: action.payload\n        }\n      };\n    case \"SAVE_PAYMENT_METHOD\":\n      return {\n        ...state,\n        cart: {\n          //leave state of cart and state alone thats what the ... mean\n          ...state.cart,\n          paymentMethod: action.payload\n        }\n      };\n    default:\n      return state;\n  }\n}\nexport function StoreProvider(props) {\n  _s();\n  // state is the start and dispact is the action to change the state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: [props.children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 10\n  }, this);\n}\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = StoreProvider;\nvar _c;\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"names":["createContext","useReducer","jsxDEV","_jsxDEV","Store","initialState","userInfo","localStorage","getItem","JSON","parse","cart","shippingAddress","cartItems","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","setItem","stringify","filter","paymentMethod","StoreProvider","props","_s","dispatch","value","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gracemora/Desktop/bs.gm.website-main/frontend/src/Store.js"],"sourcesContent":["// import { createContext, useReducer } from \"react\";\n\n// export const Store = createContext();\n\n// export function StoreProvider(props) {\n//   const initialState = {\n//     cart: {\n//       cartItems: [],\n//     },\n//   };\n\n//   function reducer(state, action) {\n//     //allows user to switch between two states (ie on and off)\n//     switch (action.type) {\n//       //add items to cart\n//       case \"CART_ADD_ITEM\":\n//         //keep all previous values and continue to add items\n//         return {\n//           ...state,\n//           cart: {\n//             ...cart,\n//             cartItems: [...state.cart.cartItems, action.payload],\n//           },\n//         };\n//       default:\n//         return state;\n//     }\n//   }\n//   // state is the start and dispact is the action to change the state\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   const value = { state, dispa };\n\n//   // .Provider is apart of the Context functionality in React, passes items to consumers\n//   return <Store.Provider value={value}>{props.childern}</Store.Provider>;\n// }\nimport { createContext, useReducer } from \"react\";\n\nexport const Store = createContext();\n\nconst initialState = {\n  userInfo: localStorage.getItem(\"userInfo\")\n    ? JSON.parse(localStorage.getItem(\"userInfo\"))\n    : null,\n\n  cart: {\n    shippingAddress: localStorage.getItem(\"shippingAddress\")\n      ? JSON.parse(localStorage.getItem(\"shippingAddress\"))\n      : //if doesn't exist, make it an empty Object\n        {},\n    cartItems: localStorage.getItem(\"cartItems\")\n      ? // parse makes a javascript object\n        JSON.parse(localStorage.getItem(\"cartItems\"))\n      : [],\n  },\n};\nfunction reducer(state, action) {\n  //allows user to switch between two states (ie on and off)\n  switch (action.type) {\n    case \"CART_ADD_ITEM\":\n      // add to cart\n      const newItem = action.payload;\n      const existItem = state.cart.cartItems.find(\n        (item) => item._id === newItem._id\n      );\n      const cartItems = existItem\n        ? state.cart.cartItems.map((item) =>\n            item._id === existItem._id ? newItem : item\n          )\n        : [...state.cart.cartItems, newItem];\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return { ...state, cart: { ...state.cart, cartItems } };\n\n    case \"CART_REMOVE_ITEM\": {\n      //filter the cart items array\n      // if the item ID does not equal the current id, return it, otherwise remove it\n      const cartItems = state.cart.cartItems.filter(\n        (item) => item._id !== action.payload._id\n      );\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n      return { ...state, cart: { ...state.cart, cartItems } };\n    }\n    case \"USER_SIGNIN\": {\n      return { ...state, userInfo: action.payload };\n    }\n    case \"USER_SIGNOUT\":\n      return {\n        ...state,\n        userInfo: null,\n      };\n    case \"SAVE_SHIPPING_ADDRESS\":\n      return {\n        ...state,\n        cart: {\n          //leave state of cart and state alone thats what the ... mean\n          ...state.cart,\n          shippingAddress: action.payload,\n        },\n      };\n    case \"SAVE_PAYMENT_METHOD\":\n      return {\n        ...state,\n        cart: {\n          //leave state of cart and state alone thats what the ... mean\n          ...state.cart,\n          paymentMethod: action.payload,\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  // state is the start and dispact is the action to change the state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children} </Store.Provider>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}